main
# Grab lettuce's id
filter(ingredients, grepl("Lettuce", IngredientName, ignore.case = TRUE))
# Importing recipes dataset
recipes <- read_csv("data/recipes.csv")
# Importing recipe_ingredients
recipe_ingredient_assignments <- read_csv("data/recipe_ingredient_assignments.csv")
# Filter only for lettuce
recipe_ingredient_assignments <- filter(recipe_ingredient_assignments,
IngredientId == 27)
# Join in the recipe table
recipes <- left_join(recipes, select(recipe_ingredient_assignments,
c("RecipeId", "Quantity")),
by="RecipeId") %>%
# Mutate to change the NA's to 0
mutate(Quantity = ifelse(is.na(Quantity), 0, Quantity)) %>%
#Change the name of the column to specify it comes from direct
rename(quantity_from_direct = Quantity)
# Import sub recipe assignment dataset
recipe_sub_recipe_assignments <- read_csv("data/recipe_sub_recipe_assignments.csv")
# Import the sub_recipes ingredients assignment
sub_recipe_ingr_assignments <- read_csv("data/sub_recipe_ingr_assignments.csv")
# Join the sub_recipes with ingredients to get the recipe id
recipe_sub_recipe_joint <- left_join(sub_recipe_ingr_assignments,
recipe_sub_recipe_assignments,
by='SubRecipeId')
# Filter for lettuce
recipe_sub_recipe_joint <- filter(recipe_sub_recipe_joint,
IngredientId == 27) %>%
mutate(total_quantity = Factor*Quantity)
# Group by recipe
recipe_sub_recipe_joint <- recipe_sub_recipe_joint %>%
group_by(RecipeId) %>%
summarise(total_quantity = sum(total_quantity, na.rm = TRUE))
# Join with the recipes table
recipes_final <- left_join(recipes, recipe_sub_recipe_joint, by="RecipeId") %>%
# Mutate to change the NA's to 0
mutate(total_quantity = ifelse(is.na(total_quantity),
0, total_quantity)) %>%
#Change the name of the column to specify it comes from direct
rename(quantity_from_sub = total_quantity) %>%
#Sum the two columns to get the total of lettuce
mutate(total_lettuce = quantity_from_direct + quantity_from_sub) %>%
#Filter out recipes that do not have lettuce
filter(total_lettuce > 0)
# Join the main transactional table with recipes to get the final table
final <- left_join(main, select(recipes_final,
c("RecipeId", "total_lettuce")),
by="RecipeId") %>%
# Filter out NA's
filter(!is.na(total_lettuce)) %>%
# Group by date
group_by(date) %>%
summarise(total_lettuce = sum(total_lettuce))
final
# Transforming date field from the final table
final$date<- as.Date(paste0("20", substr(final$date, 1, 2), "-", substr(final$date, 4, 5), "-", substr(final$date, 7, 8)))
# Build time series
ts <- ts(final, start = min(final$date), frequency = 7)
# Plot the time series directly using ggplot2
ggplot(final, aes(date, total_lettuce)) +
geom_line() +
labs(title = "Time Series Plot of Lettuce Sales",
x = "Date",
y = "Total Lettuce Sales")
final
library(readr)
library(tidyr)
library(dplyr)
library(ggplot2)
# Import the main transactional table, which is "menu_items_all"
main <- read_csv('data/menuitem.csv')
# Columns that are necessary
columns <- c("MD5KEY_ORDERSALE", "StoreNumber", "PLU", "Id", "Quantity")
# Keep only necessary columns
main <- main[,columns]
# Filter for store of interest
main <- filter(main, StoreNumber == 46673)
# Import pos_ordersale table
pos_ordersale <- read_csv("data/pos_ordersale.csv")
main <- left_join(main, select(pos_ordersale, c("date", "MD5KEY_ORDERSALE")), by="MD5KEY_ORDERSALE")
# Import pos_ordersale table
menu_items <- read_csv("data/menu_items.csv")
main <- left_join(main, select(menu_items, c("PLU", "MenuItemId", "RecipeId")), by = c("PLU" = "PLU", "Id" = "MenuItemId"))
main
# Grab lettuce's id
filter(ingredients, grepl("Lettuce", IngredientName, ignore.case = TRUE))
# Importing recipes dataset
recipes <- read_csv("data/recipes.csv")
# Importing recipe_ingredients
recipe_ingredient_assignments <- read_csv("data/recipe_ingredient_assignments.csv")
# Filter only for lettuce
recipe_ingredient_assignments <- filter(recipe_ingredient_assignments,
IngredientId == 27)
# Join in the recipe table
recipes <- left_join(recipes, select(recipe_ingredient_assignments,
c("RecipeId", "Quantity")),
by="RecipeId") %>%
# Mutate to change the NA's to 0
mutate(Quantity = ifelse(is.na(Quantity), 0, Quantity)) %>%
#Change the name of the column to specify it comes from direct
rename(quantity_from_direct = Quantity)
# Import sub recipe assignment dataset
recipe_sub_recipe_assignments <- read_csv("data/recipe_sub_recipe_assignments.csv")
# Import the sub_recipes ingredients assignment
sub_recipe_ingr_assignments <- read_csv("data/sub_recipe_ingr_assignments.csv")
# Join the sub_recipes with ingredients to get the recipe id
recipe_sub_recipe_joint <- left_join(sub_recipe_ingr_assignments,
recipe_sub_recipe_assignments,
by='SubRecipeId')
# Filter for lettuce
recipe_sub_recipe_joint <- filter(recipe_sub_recipe_joint,
IngredientId == 27) %>%
mutate(total_quantity = Quantity)
# Group by recipe
recipe_sub_recipe_joint <- recipe_sub_recipe_joint %>%
group_by(RecipeId) %>%
summarise(total_quantity = sum(total_quantity, na.rm = TRUE))
# Join with the recipes table
recipes_final <- left_join(recipes, recipe_sub_recipe_joint, by="RecipeId") %>%
# Mutate to change the NA's to 0
mutate(total_quantity = ifelse(is.na(total_quantity),
0, total_quantity)) %>%
#Change the name of the column to specify it comes from direct
rename(quantity_from_sub = total_quantity) %>%
#Sum the two columns to get the total of lettuce
mutate(total_lettuce = quantity_from_direct + quantity_from_sub) %>%
#Filter out recipes that do not have lettuce
filter(total_lettuce > 0)
# Join the main transactional table with recipes to get the final table
final <- left_join(main, select(recipes_final,
c("RecipeId", "total_lettuce")),
by="RecipeId") %>%
# Filter out NA's
filter(!is.na(total_lettuce)) %>%
# Group by date
group_by(date) %>%
summarise(total_lettuce = sum(total_lettuce))
final
# Transforming date field from the final table
final$date<- as.Date(paste0("20", substr(final$date, 1, 2), "-", substr(final$date, 4, 5), "-", substr(final$date, 7, 8)))
# Build time series
ts <- ts(final, start = min(final$date), frequency = 7)
# Plot the time series directly using ggplot2
ggplot(final, aes(date, total_lettuce)) +
geom_line() +
labs(title = "Time Series Plot of Lettuce Sales",
x = "Date",
y = "Total Lettuce Sales")
final
recipe_ingredient_assignments
final <- left_join(main, select(recipes_final,
c("RecipeId", "total_lettuce")),
by="RecipeId")
final <- left_join(main, select(recipes_final,
c("RecipeId", "total_lettuce")),
by="RecipeId")
final
final <- left_join(main, select(recipes_final,
c("RecipeId", "total_lettuce")),
by="RecipeId") %>%
mutate(total_lettuce = Quantity*total_lettuce)
final
library(readr)
library(tidyr)
library(dplyr)
library(ggplot2)
# Import the main transactional table, which is "menu_items_all"
main <- read_csv('data/menuitem.csv')
# Columns that are necessary
columns <- c("MD5KEY_ORDERSALE", "StoreNumber", "PLU", "Id", "Quantity")
# Keep only necessary columns
main <- main[,columns]
# Filter for store of interest
main <- filter(main, StoreNumber == 46673)
# Import pos_ordersale table
pos_ordersale <- read_csv("data/pos_ordersale.csv")
main <- left_join(main, select(pos_ordersale, c("date", "MD5KEY_ORDERSALE")), by="MD5KEY_ORDERSALE")
# Import pos_ordersale table
menu_items <- read_csv("data/menu_items.csv")
main <- left_join(main, select(menu_items, c("PLU", "MenuItemId", "RecipeId")), by = c("PLU" = "PLU", "Id" = "MenuItemId"))
main
# Grab lettuce's id
filter(ingredients, grepl("Lettuce", IngredientName, ignore.case = TRUE))
# Importing recipes dataset
recipes <- read_csv("data/recipes.csv")
# Importing recipe_ingredients
recipe_ingredient_assignments <- read_csv("data/recipe_ingredient_assignments.csv")
# Filter only for lettuce
recipe_ingredient_assignments <- filter(recipe_ingredient_assignments,
IngredientId == 27)
# Join in the recipe table
recipes <- left_join(recipes, select(recipe_ingredient_assignments,
c("RecipeId", "Quantity")),
by="RecipeId") %>%
# Mutate to change the NA's to 0
mutate(Quantity = ifelse(is.na(Quantity), 0, Quantity)) %>%
#Change the name of the column to specify it comes from direct
rename(quantity_from_direct = Quantity)
# Import sub recipe assignment dataset
recipe_sub_recipe_assignments <- read_csv("data/recipe_sub_recipe_assignments.csv")
# Import the sub_recipes ingredients assignment
sub_recipe_ingr_assignments <- read_csv("data/sub_recipe_ingr_assignments.csv")
# Join the sub_recipes with ingredients to get the recipe id
recipe_sub_recipe_joint <- left_join(sub_recipe_ingr_assignments,
recipe_sub_recipe_assignments,
by='SubRecipeId')
# Filter for lettuce
recipe_sub_recipe_joint <- filter(recipe_sub_recipe_joint,
IngredientId == 27) %>%
mutate(total_quantity = Factor*Quantity)
# Group by recipe
recipe_sub_recipe_joint <- recipe_sub_recipe_joint %>%
group_by(RecipeId) %>%
summarise(total_quantity = sum(total_quantity, na.rm = TRUE))
# Join with the recipes table
recipes_final <- left_join(recipes, recipe_sub_recipe_joint, by="RecipeId") %>%
# Mutate to change the NA's to 0
mutate(total_quantity = ifelse(is.na(total_quantity),
0, total_quantity)) %>%
#Change the name of the column to specify it comes from direct
rename(quantity_from_sub = total_quantity) %>%
#Sum the two columns to get the total of lettuce
mutate(total_lettuce = quantity_from_direct + quantity_from_sub) %>%
#Filter out recipes that do not have lettuce
filter(total_lettuce > 0)
# Join the main transactional table with recipes to get the final table
final <- left_join(main, select(recipes_final,
c("RecipeId", "total_lettuce")),
by="RecipeId") %>%
# Filter out NA's
filter(!is.na(total_lettuce)) %>%
# Multiply by total quantity
mutate(total_lettuce = Quantity*total_lettuce) %>%
# Group by date
group_by(date) %>%
summarise(total_lettuce = sum(total_lettuce))
final
# Transforming date field from the final table
final$date<- as.Date(paste0("20", substr(final$date, 1, 2), "-", substr(final$date, 4, 5), "-", substr(final$date, 7, 8)))
# Build time series
ts <- ts(final, start = min(final$date), frequency = 7)
# Plot the time series directly using ggplot2
ggplot(final, aes(date, total_lettuce)) +
geom_line() +
labs(title = "Time Series Plot of Lettuce Sales",
x = "Date",
y = "Total Lettuce Sales")
final <- left_join(main, select(recipes_final,
c("RecipeId", "total_lettuce")),
by="RecipeId") %>%
mutate(total_lettuce = Quantity*total_lettuce)
final
library(forcats)
library(dplyr)
library(ggplot2)
library(forcats)
shampoo <- read_csv('shampoo.csv')
shampoo <- read_csv('./shampoo.csv')
shampoo <- read_csv("C:/Users/Bernardo Carvalho/OneDrive - Imperial College London/LCS/shampoo.csv")
shampoo <- read_csv("C:/Users/Bernardo Carvalho/OneDrive - Imperial College London/LCS/shampoo.csv")
library(readr)
shampoo <- read_csv("C:/Users/Bernardo Carvalho/OneDrive - Imperial College London/LCS/shampoo.csv")
shampoo
plot(shampoo)
ggplot(shampoo, aes(Month, Sales of shampoo  over a three year period))
ggplot(shampoo, aes(Month, Sales of shampoo  over a three year period)) + geom_line()
ggplot(shampoo, aes(Month, "Sales of shampoo  over a three year period")) + geom_line()
shampoo
ggplot(shampoo, aes(Month, y="Sales of shampoo  over a three year period")) + geom_line()
ggplot(shampoo, aes(Month, y=`Sales of shampoo  over a three year period`)) + geom_line()
shampoo$`Sales of shampoo over a three year period` <- rename(sales = `Sales of shampoo over a three year period`)
shampoo$`Sales of shampoo over a three year period` <- rename(sales = shampoo$`Sales of shampoo over a three year period`)
rename(shampoo$sales = shampoo$`Sales of shampoo over a three year period`)
ggplot(shampoo, aes(Month, y=shampoo[,-1])) + geom_line()
shampoo[,-1]
shampoo
ggplot(shampoo, aes(Month, `Sales of shampoo over a three year period`)) + geom_line()
ggplot(shampoo, aes(Month, `Sales of shampoo over a three year period`)) +
geom_line()
ggplot(shampoo, aes(Month, `Sales of shampoo over a three year period`)) +
geom_line()+
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
```
shampoo <- read_csv("C:/Users/Bernardo Carvalho/OneDrive - Imperial College London/LCS/shampoo.csv")
ggplot(shampoo, aes(Month, `Sales of shampoo over a three year period`)) +
geom_line()+
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
shampoo <- read_csv("C:/Users/Bernardo Carvalho/OneDrive - Imperial College London/LCS/shampoo.csv")
ggplot(shampoo, aes(Month, `Sales of shampoo over a three year period`)) +
geom_line()+
theme(axis.text.x = element_text(angle = 90, hjust = 1))
shampoo
plot(shampoo)
plot(shampoo)
ts <- ts(shampoo)
plot(ts)
shampoo <- read_csv("C:/Users/Bernardo Carvalho/OneDrive - Imperial College London/LCS/shampoo.csv")
ts <- ts(shampoo)
ggplot(ts) +
geom_line()+
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ts
ggplot(ts, aes(Month, `Sales of shampoo over a three year period`)) +
geom_line()+
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(ts, aes(Month, "Sales of shampoo over a three year period")) +
geom_line()+
theme(axis.text.x = element_text(angle = 90, hjust = 1))
shampoo <- read_csv("C:/Users/Bernardo Carvalho/OneDrive - Imperial College London/LCS/shampoo.csv")
ts <- ts(shampoo)
ggplot(ts, aes(Month, "Sales of shampoo over a three year period")) +
geom_line()+
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ts <- ts(shampoo, frequency=12)
ts <- ts(shampoo, frequency=12)
plot(ts)
shampoo$Month as.Date(shampoo$Month)
shampoo$Month <- as.Date(shampoo$Month)
shampoo
ts <- ts(shampoo, frequency=30)
shampoo$Month <- as.Date(shampoo$Month)
ts <- ts(shampoo, frequency=30)
plot(ts)
ts <- ts(shampoo, frequency=1)
plot(ts)
ts <- ts(shampoo, frequency=12)
plot(ts)
shampoo <- read_csv("C:/Users/Bernardo Carvalho/OneDrive - Imperial College London/LCS/shampoo.csv", header=True)
shampoo <- read_csv("C:/Users/Bernardo Carvalho/OneDrive - Imperial College London/LCS/shampoo.csv", header=TRUE)
shampoo <- read_csv(file="C:/Users/Bernardo Carvalho/OneDrive - Imperial College London/LCS/shampoo.csv", header=TRUE)
shampoo <- read_csv(file="C:/Users/Bernardo Carvalho/OneDrive - Imperial College London/LCS/shampoo.csv")
ggplot(ts, aes(Month, "Sales of shampoo over a three year period")) +
geom_line()+
theme(axis.text.x = element_text(angle = 90, hjust = 1))
shampoo <- ts(data[, 2], frequency = 12, start = c(2001, 1))
shampoo <- ts(shampoo[, 2], frequency = 12, start = c(2001, 1))
shampoo %>% stl(s.window = "period") %>% autoplot
shampoo <- ts(shampoo[, 2], frequency = 12, start = c(2001, 1))
data <- read.csv(file = "shampoo.csv", header = TRUE)
file <- "C:/Users/Bernardo Carvalho/OneDrive - Imperial College London/LCS/shampoo.csv"
data <- read.csv(file = file, header = TRUE)
shampoo <- ts(shampoo[, 2], frequency = 12, start = c(2001, 1))
file <- "C:/Users/Bernardo Carvalho/OneDrive - Imperial College London/LCS/shampoo.csv"
data <- read.csv(file = file, header = TRUE)
shampoo <- ts(data[, 2], frequency = 12, start = c(2001, 1))
shampoo %>% stl(s.window = "Month") %>% autoplot
file <- "C:/Users/Bernardo Carvalho/OneDrive - Imperial College London/LCS/shampoo.csv"
data <- read.csv(file = file, header = TRUE)
shampoo <- ts(data[, 2], frequency = 12, start = c(2001, 1))
shampoo %>% stl(s.window = "period") %>% autoplot
file <- "C:/Users/Bernardo Carvalho/OneDrive - Imperial College London/LCS/shampoo.csv"
data <- read.csv(file = file, header = TRUE)
shampoo <- ts(data[, 2], frequency = 12, start = c(2001, 1))
shampoo %>% stl(s.window = "period") %>% autoplot
library(dplyr)
library(readr)
library(ggplot2)
library(forcats)
library(stats)
file <- "C:/Users/Bernardo Carvalho/OneDrive - Imperial College London/LCS/shampoo.csv"
data <- read.csv(file = file, header = TRUE)
shampoo <- ts(data[, 2], frequency = 12, start = c(2001, 1))
shampoo %>% stl(s.window = "period") %>% autoplot
shampoo
stl(shampoo)
stl(shampoo, s.window = 'period')
decomposition <- stl(shampoo, s.window = "period")
decompostion
decompostion
decomposition
autoplot(decomposition)
install.packages("forecast")
library(dplyr)
library(readr)
library(ggplot2)
library(forecast)
library(stats)
file <- "C:/Users/Bernardo Carvalho/OneDrive - Imperial College London/LCS/shampoo.csv"
data <- read.csv(file = file, header = TRUE)
shampoo <- ts(data[, 2], frequency = 12, start = c(2001, 1))
shampoo %>% stl(s.window = "period") %>% autoplot
library(readr)
library(tidyr)
library(dplyr)
library(ggplot2)
# Import the main transactional table, which is "menu_items_all"
main <- read_csv('data/menuitem.csv')
# Columns that are necessary
columns <- c("MD5KEY_ORDERSALE", "StoreNumber", "PLU", "Id", "Quantity")
# Keep only necessary columns
main <- main[,columns]
# Filter for store of interest
main <- filter(main, StoreNumber == 46673)
# Import pos_ordersale table
pos_ordersale <- read_csv("data/pos_ordersale.csv")
main <- left_join(main, select(pos_ordersale, c("date", "MD5KEY_ORDERSALE")), by="MD5KEY_ORDERSALE")
# Import pos_ordersale table
menu_items <- read_csv("data/menu_items.csv")
main <- left_join(main, select(menu_items, c("PLU", "MenuItemId", "RecipeId")), by = c("PLU" = "PLU", "Id" = "MenuItemId"))
main
# Grab lettuce's id
filter(ingredients, grepl("Lettuce", IngredientName, ignore.case = TRUE))
# Importing recipes dataset
recipes <- read_csv("data/recipes.csv")
# Importing recipe_ingredients
recipe_ingredient_assignments <- read_csv("data/recipe_ingredient_assignments.csv")
# Filter only for lettuce
recipe_ingredient_assignments <- filter(recipe_ingredient_assignments,
IngredientId == 27)
# Join in the recipe table
recipes <- left_join(recipes, select(recipe_ingredient_assignments,
c("RecipeId", "Quantity")),
by="RecipeId") %>%
# Mutate to change the NA's to 0
mutate(Quantity = ifelse(is.na(Quantity), 0, Quantity)) %>%
#Change the name of the column to specify it comes from direct
rename(quantity_from_direct = Quantity)
# Import sub recipe assignment dataset
recipe_sub_recipe_assignments <- read_csv("data/recipe_sub_recipe_assignments.csv")
# Import the sub_recipes ingredients assignment
sub_recipe_ingr_assignments <- read_csv("data/sub_recipe_ingr_assignments.csv")
# Join the sub_recipes with ingredients to get the recipe id
recipe_sub_recipe_joint <- left_join(sub_recipe_ingr_assignments,
recipe_sub_recipe_assignments,
by='SubRecipeId')
# Filter for lettuce
recipe_sub_recipe_joint <- filter(recipe_sub_recipe_joint,
IngredientId == 27) %>%
mutate(total_quantity = Factor*Quantity)
# Group by recipe
recipe_sub_recipe_joint <- recipe_sub_recipe_joint %>%
group_by(RecipeId) %>%
summarise(total_quantity = sum(total_quantity, na.rm = TRUE))
# Join with the recipes table
recipes_final <- left_join(recipes, recipe_sub_recipe_joint, by="RecipeId") %>%
# Mutate to change the NA's to 0
mutate(total_quantity = ifelse(is.na(total_quantity),
0, total_quantity)) %>%
#Change the name of the column to specify it comes from direct
rename(quantity_from_sub = total_quantity) %>%
#Sum the two columns to get the total of lettuce
mutate(total_lettuce = quantity_from_direct + quantity_from_sub) %>%
#Filter out recipes that do not have lettuce
filter(total_lettuce > 0)
# Join the main transactional table with recipes to get the final table
final <- left_join(main, select(recipes_final,
c("RecipeId", "total_lettuce")),
by="RecipeId") %>%
# Filter out NA's
filter(!is.na(total_lettuce)) %>%
# Multiply by total quantity
mutate(total_lettuce = Quantity*total_lettuce) %>%
# Group by date
group_by(date) %>%
summarise(total_lettuce = sum(total_lettuce))
final
# Transforming date field from the final table
final$date<- as.Date(paste0("20", substr(final$date, 1, 2), "-", substr(final$date, 4, 5), "-", substr(final$date, 7, 8)))
# Build time series
ts <- ts(final, start = min(final$date), frequency = 7)
# Plot the time series directly using ggplot2
ggplot(final, aes(date, total_lettuce)) +
geom_line() +
labs(title = "Time Series Plot of Lettuce Sales",
x = "Date",
y = "Total Lettuce Sales")
hw_ts <- ts(final[, 2], frequency = 30, start = min(date))
library(readr)
library(tidyr)
library(dplyr)
library(forecast)
library(ggplot2)
hw_ts <- ts(final[, 2], frequency = 30, start = min(date))
hw_ts <- ts(final[, 2], frequency = 30, start = min(final$date))
hw_ts %>% stl(s.window = "period") %>% autoplot
hw_ts
hw_ts <- ts(final[, 2], frequency = 30, start = c(2015,3,5))
hw_ts %>% stl(s.window = "period") %>% autoplot
hw_ts
hw_ts <- ts(final[, 2], frequency = 7, start = c(2015,3,5))
hw_ts <- ts(final[, 2], frequency = 7, start = c(2015,3,5))
hw_ts
hw_ts <- ts(final[, 2], frequency = 365, start = c(2015,3,5))
hw_ts
ets(shampoo)
ets(shampoo, model="ZZZ")
shampoo.ets.f <- forecast(shampoo.ets, h = 6)
shampoo.ets <- ets(shampoo, model = "ZZZ")
shampoo.ets.f <- forecast(shampoo.ets, h = 6)
shampoo.ets.f
shampoo.diff1 <- diff(shampoo, differences = 1)
autoplot(shampoo.diff1)
adf.test(shampoo.diff1)
library(tseries)
adf.test(shampoo.diff1)
pp.test(shampoo.diff1)
kpss.test(shampoo.diff1)
ndiffs(shampoo)
nsdiffs(shampoo)
acf(shampoo)
pacf(shampoo)
ggAcf(shampoo.diff1)
ggPacf(shampoo.diff1)
auto.arima(shampoo.diff1)
auto.arima(shampoo, trace = TRUE, ic = 'bic')
shampoo.m1 <- Arima(shampoo, order = c(1, 1, 1), seasonal = list(order = c(0, 0, 1), period = 12), include.drift = TRUE)
autoplot(shampoo.m1$residuals)
ggAcf(shampoo.m1$residuals)
checkresiduals(shampoo.m1)
shampoo.f <- forecast(shampoo.m1, h = 6)
autoplot(shampoo.f)
