x = "Date",
y = "Total Lettuce Sales")
# Transform our df into a time-series object
ar_ts <- ts(final[, 2], frequency=365, start = c(2015,3,5))
# Plot the decomposition of the time-series
stl_result <- decompose(ar_ts)
# Transform our df into a time-series object
ar_ts <- ts(final[, 2], frequency=7, start = c(2015,3,5))
# Plot the decomposition of the time-series
stl_result <- decompose(ar_ts)
# Plotting stl
autoplot(stl_result) +
labs(title = "STL Decomposition of Time Series",
x = "Date",
y = "Total Lettuce Sales")
# Transform our df into a time-series object
ar_ts <- ts(final[, 2], frequency=7, start = c(2015,3,5))
# Plot the decomposition of the time-series
stl_result <- decompose(ar_ts, window="periodic")
# Transform our df into a time-series object
ar_ts <- ts(final[, 2], frequency=7, start = c(2015,3,5))
# Plot the decomposition of the time-series
stl_result <- decompose(ar_ts)
# Plotting stl
autoplot(stl_result) +
labs(title = "STL Decomposition of Time Series",
x = "Date",
y = "Total Lettuce Sales")
ar_ts.train <- window(ar_ts, end = c(2015,05,27))
# Transform our df into a time-series object
ar_ts <- ts(final[, 2], frequency=7, start = c(5,3))
# Plot the decomposition of the time-series
stl_result <- decompose(ar_ts)
# Plotting stl
autoplot(stl_result) +
labs(title = "STL Decomposition of Time Series",
x = "Date",
y = "Total Lettuce Sales")
final_train <- final[final$date <= as.Date("2015/05/20")]
final_train <- final[final$date <= as.Date("2015/05/20"),]
final_test <- final[final$date > as.Date("2015/05/20"),]
# Constructing the ts
ar_ts.train <- ts(final_train[,2], frequency=7, start=c(05,03))
ar_ts.test <- ts(final_test[,2], frequency=7, start=c(05,03))
ar_ts.train
# Applying KPSS test
kpss.test(ar_ts)
library(tseries)
# Applying KPSS test
kpss.test(ar_ts)
# Splitting the dataset
train_data <- final[final$date <= as.Date('2015/05/20'),]
test_data <- final[final$date > as.Date('2015/05/20'),]
# Time series
train_ts <- ts(train_data[,2], frequency=7, start=c(05,03))
test_ts <- ts(test_data[,2], frequency=7, start=c(05,03))
# Applying KPSS test
kpss.test(train_ts)
# Applying KPSS test
kpss.test(train_ts)
# Applying KPSS test
kpss.test(train_ts)
# Applying KPSS test
nsdiffs(train_ts)
# Applying KPSS test
ggtsdisplay(train_ts,
plot.type='partial',
main = 'ACF and PACF',
smooth=TRUE)
# Applying KPSS test
ggtsdisplay(train_ts,
plot.type='partial',
main = 'ACF and PACF',
smooth=TRUE)
help("kpss.test")
# Applying the auto.arima function
auto.arima(train_ts, trace = TRUE, ic = 'bic', allowdrift = FALSE)
# Applying the auto.arima function
auto.arima(train_ts, trace = TRUE, ic = 'bic')
# Applying the auto.arima function
arima.m1 <- Arima(train_ts, order =c(0,1,1), include.drift = TRUE)
arima.m2 <- Arima(train_ts, order =c(1,1,1), include.drift = TRUE)
help(Arima)
# Applying the auto.arima function
auto.arima(train_ts, trace = TRUE, ic = 'bic')
# Devolping models for the top three models from the auto.arima() function
#ARIMA(0,0,0)(0,1,1)[7]
arima.m1 <- Arima(train_ts, order =c(0,0,0),
seasonal = c(0,1,1), include.drift = TRUE)
#ARIMA(1,0,0)(0,1,1)[7]
arima.m2 <- Arima(train_ts, order =c(1,0,0),
seasonal = c(0,1,1), include.drift = TRUE)
#ARIMA(0,0,1)(0,1,1)[7]
arima.m3 <- Arima(train_ts, order =c(0,0,1),
seasonal = c(0,1,1), include.drift = TRUE)
help("forecast")
# Devolping models for the top three models from the auto.arima() function
# Forecast for ARIMA(0,0,0)(0,1,1)[7]
arima.f1 <- forecast(arima.m1, h=26)
#Forecast for ARIMA(1,0,0)(0,1,1)[7]
arima.f2 <- forecast(arima.m2, h=26)
#Forecast for ARIMA(0,0,1)(0,1,1)[7]
arima.f3 <- forecast(arima.m3, h=26)
accuracy(arima.f1, test_data[,2])
# Devolping models for the top three models from the auto.arima() function
# Forecast for ARIMA(0,0,0)(0,1,1)[7]
arima.f1 <- forecast(arima.m1, h=26)
#Forecast for ARIMA(1,0,0)(0,1,1)[7]
arima.f2 <- forecast(arima.m2, h=26)
#Forecast for ARIMA(0,0,1)(0,1,1)[7]
arima.f3 <- forecast(arima.m3, h=26)
accuracy(arima.f1, test_data[,2])
arima.f1
accuracy(arima.f1, test_data[,2])
accuracy(arima.f1$mean, test_data[,2])
arima.f1$mean
# Devolping models for the top three models from the auto.arima() function
# Forecast for ARIMA(0,0,0)(0,1,1)[7]
arima.f1 <- forecast(arima.m1, h=26)
#Forecast for ARIMA(1,0,0)(0,1,1)[7]
arima.f2 <- forecast(arima.m2, h=26)
#Forecast for ARIMA(0,0,1)(0,1,1)[7]
arima.f3 <- forecast(arima.m3, h=26)
forecasts_f1 <- arima.f1$mean
accuracy(forecasts_f1, test_data[,2])
test_data[,2]
{r message=FALSE, warning=FALSE}
forecasts_f1
forecasts_f1 <- arima.f1$mean
accuracy(forecasts_f1, test_ts[,2])
forecasts_f1 <- arima.f1$mean
accuracy(forecasts_f1, test_ts)
test_ts
arima.f1
arima.f1$mean
# Extract the point forecasts
forecast_values <- arima.f1$mean
# Assuming test_data[,2] contains the actual values
actual_values <- test_data[, 2]
# Calculate accuracy
accuracy_values <- accuracy(forecast_values, actual_values)
# Extract the point forecasts
forecast_values <- arima.f1$mean
# Assuming test_data[,2] contains the actual values
actual_values <- test_data[, 2]
# Calculate accuracy
accuracy_values <- accuracy(forecast_values, actual_values)
# Extract the point forecasts
forecast_values <- arima.f1$mean
# Assuming test_data[,2] contains the actual values
actual_values <- test_data[, 2]
# Calculate accuracy
accuracy_values <- accuracy(list(mean = forecast_values), actual_values)
# Extract the point forecasts
forecast_values <- as.numeric(arima.f1$mean)
# Assuming test_data[,2] contains the actual values
actual_values <- as.numeric(test_data[, 2])
# Extract the point forecasts
forecast_values <- as.numeric(arima.f1$mean)
# Assuming test_data[,2] contains the actual values
actual_values <- as.numeric(test_data[, 2])
arima.f1
arima.f1
accuracy(arima.f1, test_data)
actual_values <- test_data[, 2]
# Calculate accuracy
accuracy_values <- accuracy(arima.f1, actual_values)
actual_values
arima.f1
arima.f1$mean
forecast_values <- tibble(Forecast = arima.f1$mean)
accuracy_values <- accuracy(forecast_values, actual_values)
help("accuracy")
help(forecast.accuracy)
help(accuracy)
accuracy(arima.f1, test_ts)
start(arima.f1$mean)
end(arima.f1$mean)
start(test_ts)
end(test_ts)
autoplot(train_data, series="Training") +
autolayer(test_data, series="Test") +
guides(colour=guide_legend("Split")) +
scale_color_manual(values=c("grey", "black")) +
xlab("Time") +
ylab("Unique Visitors") +
ggtitle("Train/Test Split: Weekly Data")
autoplot(train_ts, series="Training") +
autolayer(test_ts, series="Test") +
guides(colour=guide_legend("Split")) +
scale_color_manual(values=c("grey", "black")) +
xlab("Time") +
ylab("Unique Visitors") +
ggtitle("Train/Test Split: Weekly Data")
# Splitting the dataset
train_data <- final[final$date <= as.Date('2015/05/20'),]
test_data <- final[final$date > as.Date('2015/05/20'),]
# Time series
train_ts <- ts(train_data[,2], frequency=7, start=c(05,03))
test_ts <- ts(test_data[,2], frequency=7, start=c(20,03))
autoplot(train_ts, series="Training") +
autolayer(test_data, series="Test") +
guides(colour=guide_legend("Split")) +
scale_color_manual(values=c("grey", "black")) +
xlab("Date") +
ylab("Lettuce consumption") +
ggtitle("Train/Test Split: Weekly Data")
autoplot(train_ts, series="Training") +
autolayer(test_data, series="Test") +
guides(colour=guide_legend("Split")) +
scale_color_manual(values=c("grey", "black")) +
xlab("Date") +
ylab("Lettuce consumption") +
ggtitle("Train/Test Split: Weekly Data")
autoplot(train_ts, series="Training") +
autolayer(test_ts, series="Test") +
guides(colour=guide_legend("Split")) +
scale_color_manual(values=c("grey", "black")) +
xlab("Date") +
ylab("Lettuce consumption") +
ggtitle("Train/Test Split: Weekly Data")
# Splitting the dataset
train_data <- final[final$date <= as.Date('2015/05/20'),]
test_data <- final[final$date > as.Date('2015/05/20'),]
# Time series
train_ts <- ts(train_data[,2], frequency=7, start=c(05,03))
test_ts <- ts(test_data[,2], frequency=7, start=c(05,20))
autoplot(train_ts, series="Training") +
autolayer(test_ts, series="Test") +
guides(colour=guide_legend("Split")) +
scale_color_manual(values=c("grey", "black")) +
xlab("Date") +
ylab("Lettuce consumption") +
ggtitle("Train/Test Split: Weekly Data")
# Splitting the dataset
train_data <- final[final$date <= as.Date('2015/05/20'),]
test_data <- final[final$date > as.Date('2015/05/20'),]
# Time series
train_ts <- ts(train_data[,2], frequency=7, start=c(05,03))
test_ts <- ts(test_data[,2], frequency=7, start=c(05,03))
autoplot(train_ts, series="Training") +
autolayer(test_ts, series="Test") +
guides(colour=guide_legend("Split")) +
scale_color_manual(values=c("grey", "black")) +
xlab("Date") +
ylab("Lettuce consumption") +
ggtitle("Train/Test Split: Weekly Data")
# Splitting the dataset
train_data <- final[final$date <= as.Date('2015/05/20'),]
test_data <- final[final$date > as.Date('2015/05/20'),]
# Time series
train_ts <- ts(train_data[,2], frequency=7, start=c(05,03))
test_ts <- ts(test_data[,2], frequency=7, start=c(05,20))
autoplot(train_ts, series="Training") +
autolayer(test_ts, series="Test") +
guides(colour=guide_legend("Split")) +
scale_color_manual(values=c("grey", "black")) +
xlab("Date") +
ylab("Lettuce consumption") +
ggtitle("Train/Test Split: Weekly Data")
# Splitting the dataset
train_data <- final[final$date <= as.Date('2015/05/20'),]
test_data <- final[final$date > as.Date('2015/05/20'),]
# Time series
train_ts <- ts(train_data[,2], frequency=7, start=c(05,03))
test_ts <- ts(test_data[,2], frequency=7, start=c(05,40))
autoplot(train_ts, series="Training") +
autolayer(test_ts, series="Test") +
guides(colour=guide_legend("Split")) +
scale_color_manual(values=c("grey", "black")) +
xlab("Date") +
ylab("Lettuce consumption") +
ggtitle("Train/Test Split: Weekly Data")
# Splitting the dataset
train_data <- final[final$date <= as.Date('2015/05/20'),]
test_data <- final[final$date > as.Date('2015/05/20'),]
# Time series
train_ts <- ts(train_data[,2], frequency=7, start=c(05,03))
test_ts <- ts(test_data[,2], frequency=7, start=c(05,03))
train_ts
test_ts
arima.f1
arima.f1$mean
# Splitting the dataset
train_data <- final[final$date <= as.Date('2015/05/20'),]
test_data <- final[final$date > as.Date('2015/05/20'),]
# Time series
train_ts <- ts(train_data[,2], frequency=7, start=c(05,03))
test_ts <- ts(test_data[,2], frequency=7, start=c(16,03))
autoplot(train_ts, series="Training") +
autolayer(test_ts, series="Test") +
guides(colour=guide_legend("Split")) +
scale_color_manual(values=c("grey", "black")) +
xlab("Date") +
ylab("Lettuce consumption") +
ggtitle("Train/Test Split: Weekly Data")
# Splitting the dataset
train_data <- final[final$date <= as.Date('2015/05/20'),]
test_data <- final[final$date > as.Date('2015/05/20'),]
# Time series
train_ts <- ts(train_data[,2], frequency=7, start=c(05,03))
test_ts <- ts(test_data[,2], frequency=7, start=c(15,03))
autoplot(train_ts, series="Training") +
autolayer(test_ts, series="Test") +
guides(colour=guide_legend("Split")) +
scale_color_manual(values=c("grey", "black")) +
xlab("Date") +
ylab("Lettuce consumption") +
ggtitle("Train/Test Split: Weekly Data")
# Splitting the dataset
train_data <- final[final$date <= as.Date('2015/05/20'),]
test_data <- final[final$date > as.Date('2015/05/20'),]
# Time series
train_ts <- ts(train_data[,2], frequency=7, start=c(05,03))
test_ts <- ts(test_data[,2], frequency=7, start=c(16,03))
autoplot(train_ts, series="Training") +
autolayer(test_ts, series="Test") +
guides(colour=guide_legend("Split")) +
scale_color_manual(values=c("grey", "black")) +
xlab("Date") +
ylab("Lettuce consumption") +
ggtitle("Train/Test Split: Weekly Data")
autoplot(train_ts, series="Training") +
autolayer(test_ts, series="Test") +
guides(colour=guide_legend("Split")) +
scale_color_manual(values=c("blue", "black")) +
xlab("Date") +
ylab("Lettuce consumption") +
ggtitle("Train/Test Split: Weekly Data")
accuracy(arima.f1$mean, ts_data)
test_ts <- ts(test_data[,2], frequency=7, start=c(16,03))
accuracy(arima.f1, test_ts)
# Calculate accuracy
accuracy(arima.f1, test_ts)
# Calculate accuracy
acc_1 <- accuracy(arima.f1, test_ts)
acc_1
# Calculate accuracy
acc_1 <- accuracy(arima.f1, test_ts)
plot(acc_1)
acc_1$ME
# Calculate accuracy
accuracy(arima.f1, test_ts)
accuracy(arima.f2, test_ts)
accuracy(arima.f3, test_ts)
# Calculate accuracy for the first model
acc1 <- accuracy(arima.f1, test_ts)
# Calculate accuracy for the second model
acc2 <- accuracy(arima.f2, test_ts)
# Calculate accuracy for the third model
acc3 <- accuracy(arima.f3, test_ts)
plot(acc1)
# Calculate accuracy for the first model
acc1 <- accuracy(arima.f1, test_ts)
# Calculate accuracy for the second model
acc2 <- accuracy(arima.f2, test_ts)
# Calculate accuracy for the third model
acc3 <- accuracy(arima.f3, test_ts)
plot(acc1, acc2)
# Calculate accuracy for the first model
acc1 <- accuracy(arima.f1, test_ts)
# Calculate accuracy for the second model
acc2 <- accuracy(arima.f2, test_ts)
# Calculate accuracy for the third model
acc3 <- accuracy(arima.f3, test_ts)
plot(c(acc1, acc2)
# Calculate accuracy for the first model
acc1 <- accuracy(arima.f1, test_ts)
# Calculate accuracy for the second model
acc2 <- accuracy(arima.f2, test_ts)
# Calculate accuracy for the third model
acc3 <- accuracy(arima.f3, test_ts)
plot(c(acc1, acc2))
# Calculate accuracy for the first model
acc1 <- accuracy(arima.f1, test_ts)
# Calculate accuracy for the second model
acc2 <- accuracy(arima.f2, test_ts)
# Calculate accuracy for the third model
acc3 <- accuracy(arima.f3, test_ts)
# Calculate accuracy for the first model
acc1 <- accuracy(arima.f1, test_ts)
# Calculate accuracy for the second model
acc2 <- accuracy(arima.f2, test_ts)
# Calculate accuracy for the third model
acc3 <- accuracy(arima.f3, test_ts)
print(acc1, acc2, acc3)
# Calculate accuracy for the first model
acc1 <- accuracy(arima.f1, test_ts)
# Calculate accuracy for the second model
acc2 <- accuracy(arima.f2, test_ts)
# Calculate accuracy for the third model
acc3 <- accuracy(arima.f3, test_ts)
rmse_values <- data.frame(Model = c("ARIMA(0,0,0)(0,1,1)[7]", "ARIMA(1,0,0)(0,1,1)[7]", "ARIMA(0,0,1)(0,1,1)[7]"),
RMSE = c(acc1, acc2, acc3))
rmse_values
acc1
acc1[1]
acc1[3]
acc1[3:4]
# Calculate accuracy for the first model
accuracy(arima.f1, test_ts)
# Calculate accuracy for the second model
accuracy(arima.f2, test_ts)
# Calculate accuracy for the third model
accuracy(arima.f3, test_ts)
# Devolping models for the top three models from the auto.arima() function
#ARIMA(0,0,0)(0,1,1)[7]
arima.m1 <- Arima(train_ts, order =c(0,0,0),
seasonal = c(0,1,1),  period = 7, include.drift = TRUE)
# Splitting the dataset
train_data <- final[final$date <= as.Date('2015/05/20'),]
test_data <- final[final$date > as.Date('2015/05/20'),]
# Time series
train_ts <- ts(train_data[,2], frequency=7, start=c(05,03))
test_ts <- ts(test_data[,2], frequency=7, start=c(16,03))
final_ts <- ts(final[,2], frequency=7, start=c(05,03))
best_arima.m3 <- Arima(final_ts, order=c(0,0,1), seasonal = c(0,1,1))
best_arima.m3 <- Arima(final_ts, order=c(0,0,1), seasonal = c(0,1,1))
best_arima.m3.f <- forecast(best_arima.m3, h=14)
plot(best_arima.m3.f, main="ARIMA forecast for the next 14 days", xlab='Date',
ylab='Lettuce demand (ounces)')
best_arima.m3 <- Arima(final_ts, order=c(0,0,1), seasonal = c(0,1,1))
best_arima.m3.f <- forecast(best_arima.m3, h=14)
plot(best_arima.m3.f, main="ARIMA forecast for the next 14 days", xlab='Date',
ylab='Lettuce demand (ounces)') + legend("topright", legend("Actual", "Forecast"))
best_arima.m3 <- Arima(final_ts, order=c(0,0,1), seasonal = c(0,1,1))
best_arima.m3.f <- forecast(best_arima.m3, h=14)
plot(best_arima.m3.f, main="ARIMA forecast for the next 14 days", xlab='Date',
ylab='Lettuce demand (ounces)') + legend("topright", legend("Actual", "Forecast"))
best_arima.m3 <- Arima(final_ts, order=c(0,0,1), seasonal = c(0,1,1))
best_arima.m3.f <- forecast(best_arima.m3, h=14)
plot(best_arima.m3.f, main="ARIMA forecast for the next 14 days", xlab='Date',
ylab='Lettuce demand (ounces)') +
legend("topright", legend("Actual", "Forecast"), box.lty = 0, lty=1, cx=0.5)
# Applying the auto.arima function
auto.arima(train_ts, trace = TRUE, ic = 'bic', allowdrift = FALSE)
# Devolping models for the top three models from the auto.arima() function
#ARIMA(0,0,0)(0,1,1)[7]
arima.m1 <- Arima(train_ts, order =c(0,0,0),
seasonal = c(0,1,1), include.drift = TRUE)
#ARIMA(1,0,0)(0,1,1)[7]
arima.m2 <- Arima(train_ts, order =c(1,0,0),
seasonal = c(0,1,1), include.drift = TRUE)
#ARIMA(0,0,0)(1,1,1)[7]
arima.m3 <- Arima(train_ts, order =c(0,0,1),
seasonal = c(0,1,1), include.drift = TRUE)
# Devolping models for the top three models from the auto.arima() function
# Forecast for ARIMA(0,0,0)(0,1,1)[7]
arima.f1 <- forecast(arima.m1, h=26)
#Forecast for ARIMA(1,0,0)(0,1,1)[7]
arima.f2 <- forecast(arima.m2, h=26)
#Forecast for ARIMA(0,0,1)(0,1,1)[7]
arima.f3 <- forecast(arima.m3, h=26)
# Calculate accuracy for the first model
accuracy(arima.f1, test_ts)
# Calculate accuracy for the second model
accuracy(arima.f2, test_ts)
# Calculate accuracy for the third model
accuracy(arima.f3, test_ts)
best_arima.m3 <- Arima(final_ts, order=c(0,0,0), seasonal = c(1,1,1))
best_arima.m3.f <- forecast(best_arima.m3, h=14)
plot(best_arima.m3.f, main="ARIMA forecast for the next 14 days", xlab='Date',
ylab='Lettuce demand (ounces)') +
legend("topright", legend("Actual", "Forecast"), box.lty = 0, lty=1, cx=0.5)
best_arima.m3 <- Arima(final_ts, order=c(0,0,0), seasonal = c(1,1,1))
best_arima.m3.f <- forecast(best_arima.m3, h=14)
plot(best_arima.m3.f, main="ARIMA forecast for the next 14 days", xlab='Date',
ylab='Lettuce demand (ounces)')
legend("topright", legend("Actual", "Forecast"), box.lty = 0, lty=1, cx=0.5)
best_arima.m3 <- Arima(final_ts, order=c(0,0,0), seasonal = c(1,1,1))
best_arima.m3.f <- forecast(best_arima.m3, h=14)
plot(best_arima.m3.f, main="ARIMA forecast for the next 14 days", xlab='Date',
ylab='Lettuce demand (ounces)',
legend("topright", legend("Actual", "Forecast"), box.lty = 0, lty=1, cx=0.5))
best_arima.m3 <- Arima(final_ts, order=c(0,0,0), seasonal = c(1,1,1))
best_arima.m3.f <- forecast(best_arima.m3, h=14)
plot(best_arima.m3.f, main="ARIMA forecast for the next 14 days", xlab='Date',
ylab='Lettuce demand (ounces)')+
legend("topright", legend("Actual", "Forecast"), box.lty = 0, lty=1, cx=0.5)
best_arima.m3 <- Arima(final_ts, order=c(0,0,0), seasonal = c(1,1,1))
best_arima.m3.f <- forecast(best_arima.m3, h=14)
plot(best_arima.m3.f, main="ARIMA forecast for the next 14 days", xlab='Date',
ylab='Lettuce demand (ounces)')+
legend("topright", legend("Actual", "Forecast"), box.lty = 0, lty=1)
best_arima.m3 <- Arima(final_ts, order=c(0,0,0), seasonal = c(1,1,1))
best_arima.m3.f <- forecast(best_arima.m3, h=14)
plot(best_arima.m3.f, main="ARIMA forecast for the next 14 days", xlab='Date',
ylab='Lettuce demand (ounces)')
best_arima.m3 <- Arima(final_ts, order=c(0,0,0), seasonal = c(1,1,1))
best_arima.m3.f <- forecast(best_arima.m3, h=14)
plot(best_arima.m3.f, main="ARIMA forecast for the next 14 days", xlab='Date',
ylab='Lettuce demand (ounces)')
best_arima.m3 <- Arima(final_ts, order=c(0,0,0), seasonal = c(1,1,1))
best_arima.m3.f <- forecast(best_arima.m3, h=14)
plot(best_arima.m3.f, main="ARIMA forecast for the next 14 days", xlab='Date',
ylab='Lettuce demand (ounces)')
checkresiduals(best_arima.m3)
best_arima.m3 <- Arima(final_ts, order=c(0,0,0), seasonal = c(0,1,1))
best_arima.m3.f <- forecast(best_arima.m3, h=14)
plot(best_arima.m3.f, main="ARIMA forecast for the next 14 days", xlab='Date',
ylab='Lettuce demand (ounces)')
best_arima.m3 <- Arima(final_ts, order=c(0,0,0), seasonal = c(0,1,1))
best_arima.m3.f <- forecast(best_arima.m3, h=14)
plot(best_arima.m3.f, main="ARIMA forecast for the next 14 days", xlab='Date',
ylab='Lettuce demand (ounces)')
checkresiduals(best_arima.m3)
best_arima.m3 <- Arima(final_ts, order=c(0,0,0), seasonal = c(1,1,1))
best_arima.m3.f <- forecast(best_arima.m3, h=14)
plot(best_arima.m3.f, main="ARIMA forecast for the next 14 days", xlab='Date',
ylab='Lettuce demand (ounces)')
checkresiduals(best_arima.m3)
help(checkresiduals)
